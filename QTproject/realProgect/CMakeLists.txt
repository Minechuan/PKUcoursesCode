cmake_minimum_required(VERSION 3.5)

project(realProgect VERSION 0.1 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets LinguistTools)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets LinguistTools)

set(TS_FILES realProgect_zh_CN.ts)

set(PROJECT_SOURCES
        main.cpp
        mainwindow.cpp
        mainwindow.h
        mainwindow.ui
        ${TS_FILES}
)

if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(realProgect
        MANUAL_FINALIZATION
        ${PROJECT_SOURCES}


        clockhzj.h clockhzj.cpp clockhzj.ui
        calendarmc.h calendarmc.cpp calendarmc.ui
        schedulemsy.h schedulemsy.cpp schedulemsy.ui
        dailymsy.h dailymsy.cpp dailymsy.ui
        dailymsy2.h dailymsy2.cpp dailymsy2.ui
        dailymsy_allin.h dailymsy_allin.cpp dailymsy_allin.ui

        modevent.h modevent.cpp modevent.ui
        countdowndaysmc.h countdowndaysmc.cpp countdowndaysmc.ui
        images.qrc
        win_cal_viewmc.h win_cal_viewmc.cpp win_cal_viewmc.ui
        coursemsy.h coursemsy.cpp coursemsy.ui
        global.cpp
        choosetheme.h choosetheme.cpp choosetheme.ui
        intro.h intro.cpp intro.ui
        global.h
        dailymsy3.h dailymsy3.cpp dailymsy3.ui
        dailymsy4.h dailymsy4.cpp dailymsy4.ui
        dailymsy5.h dailymsy5.cpp dailymsy5.ui
        hoverbutton.h hoverbutton.cpp
        sec_clock.h sec_clock.cpp sec_clock.ui
        r_clock.h r_clock.cpp r_clock.ui
        alarm.h alarm.cpp alarm.ui







    )
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET realProgect APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation

    qt_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
else()
    if(ANDROID)
        add_library(realProgect SHARED
            ${PROJECT_SOURCES}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(realProgect
            ${PROJECT_SOURCES}
        )
    endif()

    qt5_create_translation(QM_FILES ${CMAKE_SOURCE_DIR} ${TS_FILES})
endif()

target_link_libraries(realProgect PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)

# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
if(${QT_VERSION} VERSION_LESS 6.1.0)
  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.realProgect)
endif()
set_target_properties(realProgect PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

include(GNUInstallDirs)
install(TARGETS realProgect
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)
INCLUDE_DIRECTORIES(
    ${PROJECT_SOURCE_DIR}
)
find_package(QT NAMES Qt6 QT5 REQUIRED COMPONENTS Widgets Sql)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets Sql)
target_link_libraries(realProgect PRIVATE Qt${QT_VERSION_MAJOR}::Widgets Qt${QT_VERSION_MAJOR}::Sql)


if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(realProgect)
endif()
